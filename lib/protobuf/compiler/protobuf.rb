
# line 1 "protobuf.rl"

# line 86 "protobuf.rl"


class ProtoFileParser
  class ParserError < RuntimeError
  end

  attr_reader :input_name, :io

  def initialize(input_name = nil, io = $stdout)
    @input_name = input_name
    @io = io
  end

  def output(str)
    io.write str
  end

  def dot_to_module(str)
    str.gsub(".", "::")
  end

  def capfirst(str)
    str[0,1].capitalize + str[1..-1]
  end

  def outputS(str)
    io.write "  " if @has_package
    io.write "  " * @depth
    io.write str
  end

  def run_machine(data)
    
# line 39 "protobuf.rb"
class << self
	attr_accessor :_proto_file_actions
	private :_proto_file_actions, :_proto_file_actions=
end
self._proto_file_actions = [
	0, 1, 0, 1, 1, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 9, 1, 
	12, 1, 14, 1, 15, 1, 17, 1, 
	18, 1, 19, 1, 20, 1, 21, 2, 
	0, 4, 2, 1, 5, 2, 1, 14, 
	2, 2, 8, 2, 4, 0, 2, 5, 
	7, 2, 5, 13, 2, 5, 15, 2, 
	5, 16, 2, 5, 19, 2, 17, 0, 
	2, 18, 4, 2, 18, 20, 3, 5, 
	3, 11, 3, 10, 1, 11
]

class << self
	attr_accessor :_proto_file_key_offsets
	private :_proto_file_key_offsets, :_proto_file_key_offsets=
end
self._proto_file_key_offsets = [
	0, 0, 1, 2, 3, 4, 5, 10, 
	20, 21, 22, 35, 41, 42, 43, 55, 
	56, 57, 70, 76, 77, 78, 86, 94, 
	95, 96, 106, 112, 113, 114, 126, 134, 
	140, 152, 160, 161, 162, 163, 164, 165, 
	166, 171, 181, 182, 183, 196, 202, 203, 
	204, 205, 206, 207, 208, 209, 210, 215, 
	225, 226, 227, 241, 247, 248, 249, 254, 
	264, 265, 266, 267, 268, 269, 274, 284, 
	285, 286, 299, 305, 306, 307, 319, 320, 
	321, 334, 340, 341, 342, 350, 358, 359, 
	360, 370, 376, 377, 378, 390, 398, 404, 
	416, 424, 425, 426, 427, 428, 429, 430, 
	435, 445, 446, 447, 460, 466, 467, 468, 
	469, 470, 471, 472, 473, 474, 475, 480, 
	497, 508, 521, 531, 532, 533, 546, 552, 
	553, 554, 562, 563, 564, 575, 582, 583, 
	584, 590, 591, 592, 593, 594, 595, 596, 
	597, 598, 604, 610, 611, 612, 629, 634, 
	640, 646, 647, 648, 649, 664, 670, 671, 
	672, 682, 690, 696, 708, 710, 721, 723, 
	733, 737, 739, 747, 760, 774, 788, 802, 
	816, 829, 843, 857, 866, 872, 885, 894, 
	899, 914, 928, 942, 949, 963, 977, 991, 
	1005, 1019, 1033, 1047, 1061, 1076, 1090, 1104, 
	1118, 1133, 1147, 1161, 1175, 1189, 1203, 1217, 
	1231, 1247, 1261, 1275, 1289, 1303, 1317, 1331, 
	1332, 1333, 1348, 1362, 1376, 1388, 1402, 1416, 
	1430, 1444, 1458, 1472, 1486, 1500, 1515, 1529, 
	1543, 1557, 1572, 1586, 1600, 1614, 1628, 1642, 
	1656, 1670, 1686, 1700, 1714, 1728, 1742, 1756, 
	1770, 1771, 1773, 1774, 1775, 1776, 1777, 1778, 
	1779, 1780, 1781, 1789
]

class << self
	attr_accessor :_proto_file_trans_keys
	private :_proto_file_trans_keys, :_proto_file_trans_keys=
end
self._proto_file_trans_keys = [
	47, 10, 110, 117, 109, 13, 32, 47, 
	9, 10, 13, 32, 47, 95, 9, 10, 
	65, 90, 97, 122, 47, 10, 13, 32, 
	47, 95, 123, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 47, 123, 9, 
	10, 47, 10, 13, 32, 47, 59, 95, 
	125, 9, 10, 65, 90, 97, 122, 47, 
	10, 13, 32, 47, 61, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	47, 61, 9, 10, 47, 10, 13, 32, 
	47, 48, 9, 10, 49, 57, 13, 32, 
	47, 48, 9, 10, 49, 57, 47, 10, 
	13, 32, 47, 59, 88, 120, 9, 10, 
	48, 55, 13, 32, 47, 59, 9, 10, 
	47, 10, 13, 32, 47, 59, 95, 125, 
	9, 10, 65, 90, 97, 122, 13, 32, 
	47, 59, 9, 10, 48, 55, 48, 57, 
	65, 70, 97, 102, 13, 32, 47, 59, 
	9, 10, 48, 57, 65, 70, 97, 102, 
	13, 32, 47, 59, 9, 10, 48, 57, 
	101, 115, 115, 97, 103, 101, 13, 32, 
	47, 9, 10, 13, 32, 47, 95, 9, 
	10, 65, 90, 97, 122, 47, 10, 13, 
	32, 47, 95, 123, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 47, 123, 
	9, 10, 47, 10, 97, 99, 107, 97, 
	103, 101, 13, 32, 47, 9, 10, 13, 
	32, 47, 95, 9, 10, 65, 90, 97, 
	122, 47, 10, 13, 32, 46, 47, 59, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 47, 59, 9, 10, 47, 
	10, 95, 65, 90, 97, 122, 13, 32, 
	47, 101, 109, 111, 114, 125, 9, 10, 
	47, 10, 110, 117, 109, 13, 32, 47, 
	9, 10, 13, 32, 47, 95, 9, 10, 
	65, 90, 97, 122, 47, 10, 13, 32, 
	47, 95, 123, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 47, 123, 9, 
	10, 47, 10, 13, 32, 47, 59, 95, 
	125, 9, 10, 65, 90, 97, 122, 47, 
	10, 13, 32, 47, 61, 95, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	47, 61, 9, 10, 47, 10, 13, 32, 
	47, 48, 9, 10, 49, 57, 13, 32, 
	47, 48, 9, 10, 49, 57, 47, 10, 
	13, 32, 47, 59, 88, 120, 9, 10, 
	48, 55, 13, 32, 47, 59, 9, 10, 
	47, 10, 13, 32, 47, 59, 95, 125, 
	9, 10, 65, 90, 97, 122, 13, 32, 
	47, 59, 9, 10, 48, 55, 48, 57, 
	65, 70, 97, 102, 13, 32, 47, 59, 
	9, 10, 48, 57, 65, 70, 97, 102, 
	13, 32, 47, 59, 9, 10, 48, 57, 
	101, 115, 115, 97, 103, 101, 13, 32, 
	47, 9, 10, 13, 32, 47, 95, 9, 
	10, 65, 90, 97, 122, 47, 10, 13, 
	32, 47, 95, 123, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 47, 123, 
	9, 10, 47, 10, 112, 116, 105, 111, 
	110, 97, 108, 13, 32, 47, 9, 10, 
	13, 32, 46, 47, 95, 98, 100, 102, 
	105, 115, 117, 9, 10, 65, 90, 97, 
	122, 95, 98, 100, 102, 105, 115, 117, 
	65, 90, 97, 122, 13, 32, 46, 47, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 47, 95, 9, 10, 65, 
	90, 97, 122, 47, 10, 13, 32, 47, 
	61, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 47, 61, 9, 10, 
	47, 10, 13, 32, 47, 48, 9, 10, 
	49, 57, 47, 10, 13, 32, 47, 59, 
	88, 91, 120, 9, 10, 48, 55, 13, 
	32, 47, 59, 91, 9, 10, 47, 10, 
	13, 32, 47, 100, 9, 10, 47, 10, 
	101, 102, 97, 117, 108, 116, 13, 32, 
	47, 61, 9, 10, 13, 32, 47, 61, 
	9, 10, 47, 10, 13, 32, 34, 39, 
	47, 48, 95, 102, 116, 9, 10, 49, 
	57, 65, 90, 97, 122, 0, 10, 34, 
	39, 92, 13, 32, 47, 93, 9, 10, 
	13, 32, 47, 93, 9, 10, 47, 10, 
	59, 34, 39, 63, 88, 92, 102, 110, 
	114, 116, 118, 120, 48, 55, 97, 98, 
	48, 57, 65, 70, 97, 102, 47, 10, 
	13, 32, 47, 88, 93, 120, 9, 10, 
	48, 55, 13, 32, 47, 93, 9, 10, 
	48, 55, 48, 57, 65, 70, 97, 102, 
	13, 32, 47, 93, 9, 10, 48, 57, 
	65, 70, 97, 102, 48, 57, 13, 32, 
	46, 47, 69, 93, 101, 9, 10, 48, 
	57, 48, 57, 13, 32, 47, 69, 93, 
	101, 9, 10, 48, 57, 43, 45, 48, 
	57, 48, 57, 13, 32, 47, 93, 9, 
	10, 48, 57, 13, 32, 47, 93, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 47, 93, 95, 97, 9, 10, 
	48, 57, 65, 90, 98, 122, 13, 32, 
	47, 93, 95, 108, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 47, 93, 
	95, 115, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 47, 93, 95, 101, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 47, 93, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 47, 
	93, 95, 114, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 47, 93, 95, 
	117, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 47, 59, 91, 9, 10, 
	48, 55, 48, 57, 65, 70, 97, 102, 
	13, 32, 47, 59, 91, 9, 10, 48, 
	57, 65, 70, 97, 102, 13, 32, 47, 
	59, 91, 9, 10, 48, 57, 95, 65, 
	90, 97, 122, 13, 32, 46, 47, 95, 
	111, 121, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 46, 47, 95, 111, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 46, 47, 95, 108, 9, 10, 
	48, 57, 65, 90, 97, 122, 95, 48, 
	57, 65, 90, 97, 122, 13, 32, 46, 
	47, 95, 116, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 46, 47, 95, 
	101, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 46, 47, 95, 115, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 46, 47, 95, 111, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 46, 
	47, 95, 117, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 46, 47, 95, 
	98, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 46, 47, 95, 108, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 46, 47, 95, 101, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 46, 
	47, 95, 105, 108, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 46, 47, 
	95, 120, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 46, 47, 95, 101, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 46, 47, 95, 100, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	46, 47, 51, 54, 95, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 46, 
	47, 50, 95, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 46, 47, 52, 
	95, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 46, 47, 95, 111, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 46, 47, 95, 97, 9, 10, 48, 
	57, 65, 90, 98, 122, 13, 32, 46, 
	47, 95, 116, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 46, 47, 95, 
	110, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 46, 47, 95, 116, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 46, 47, 95, 102, 105, 116, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 46, 47, 95, 105, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 46, 
	47, 95, 114, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 46, 47, 95, 
	105, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 46, 47, 95, 110, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 46, 47, 95, 103, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 46, 
	47, 95, 105, 9, 10, 48, 57, 65, 
	90, 97, 122, 47, 10, 13, 32, 46, 
	47, 95, 111, 121, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 46, 47, 
	95, 111, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 46, 47, 95, 108, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 47, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 46, 47, 
	95, 116, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 46, 47, 95, 101, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 46, 47, 95, 115, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	46, 47, 95, 111, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 46, 47, 
	95, 117, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 46, 47, 95, 98, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 46, 47, 95, 108, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	46, 47, 95, 101, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 46, 47, 
	95, 105, 108, 9, 10, 48, 57, 65, 
	90, 97, 122, 13, 32, 46, 47, 95, 
	120, 9, 10, 48, 57, 65, 90, 97, 
	122, 13, 32, 46, 47, 95, 101, 9, 
	10, 48, 57, 65, 90, 97, 122, 13, 
	32, 46, 47, 95, 100, 9, 10, 48, 
	57, 65, 90, 97, 122, 13, 32, 46, 
	47, 51, 54, 95, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 46, 47, 
	50, 95, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 46, 47, 52, 95, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 46, 47, 95, 111, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	46, 47, 95, 97, 9, 10, 48, 57, 
	65, 90, 98, 122, 13, 32, 46, 47, 
	95, 116, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 46, 47, 95, 110, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 46, 47, 95, 116, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	46, 47, 95, 102, 105, 116, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	46, 47, 95, 105, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 46, 47, 
	95, 114, 9, 10, 48, 57, 65, 90, 
	97, 122, 13, 32, 46, 47, 95, 105, 
	9, 10, 48, 57, 65, 90, 97, 122, 
	13, 32, 46, 47, 95, 110, 9, 10, 
	48, 57, 65, 90, 97, 122, 13, 32, 
	46, 47, 95, 103, 9, 10, 48, 57, 
	65, 90, 97, 122, 13, 32, 46, 47, 
	95, 105, 9, 10, 48, 57, 65, 90, 
	97, 122, 101, 112, 113, 101, 97, 116, 
	101, 100, 117, 105, 114, 13, 32, 47, 
	101, 109, 112, 9, 10, 0
]

class << self
	attr_accessor :_proto_file_single_lengths
	private :_proto_file_single_lengths, :_proto_file_single_lengths=
end
self._proto_file_single_lengths = [
	0, 1, 1, 1, 1, 1, 3, 4, 
	1, 1, 5, 4, 1, 1, 6, 1, 
	1, 5, 4, 1, 1, 4, 4, 1, 
	1, 6, 4, 1, 1, 6, 4, 0, 
	4, 4, 1, 1, 1, 1, 1, 1, 
	3, 4, 1, 1, 5, 4, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 4, 
	1, 1, 6, 4, 1, 1, 1, 8, 
	1, 1, 1, 1, 1, 3, 4, 1, 
	1, 5, 4, 1, 1, 6, 1, 1, 
	5, 4, 1, 1, 4, 4, 1, 1, 
	6, 4, 1, 1, 6, 4, 0, 4, 
	4, 1, 1, 1, 1, 1, 1, 3, 
	4, 1, 1, 5, 4, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 3, 11, 
	7, 5, 4, 1, 1, 5, 4, 1, 
	1, 4, 1, 1, 7, 5, 1, 1, 
	4, 1, 1, 1, 1, 1, 1, 1, 
	1, 4, 4, 1, 1, 9, 5, 4, 
	4, 1, 1, 1, 11, 0, 1, 1, 
	6, 4, 0, 4, 0, 7, 0, 6, 
	2, 0, 4, 5, 6, 6, 6, 6, 
	5, 6, 6, 5, 0, 5, 5, 1, 
	7, 6, 6, 1, 6, 6, 6, 6, 
	6, 6, 6, 6, 7, 6, 6, 6, 
	7, 6, 6, 6, 6, 6, 6, 6, 
	8, 6, 6, 6, 6, 6, 6, 1, 
	1, 7, 6, 6, 4, 6, 6, 6, 
	6, 6, 6, 6, 6, 7, 6, 6, 
	6, 7, 6, 6, 6, 6, 6, 6, 
	6, 8, 6, 6, 6, 6, 6, 6, 
	1, 2, 1, 1, 1, 1, 1, 1, 
	1, 1, 6, 0
]

class << self
	attr_accessor :_proto_file_range_lengths
	private :_proto_file_range_lengths, :_proto_file_range_lengths=
end
self._proto_file_range_lengths = [
	0, 0, 0, 0, 0, 0, 1, 3, 
	0, 0, 4, 1, 0, 0, 3, 0, 
	0, 4, 1, 0, 0, 2, 2, 0, 
	0, 2, 1, 0, 0, 3, 2, 3, 
	4, 2, 0, 0, 0, 0, 0, 0, 
	1, 3, 0, 0, 4, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 3, 
	0, 0, 4, 1, 0, 0, 2, 1, 
	0, 0, 0, 0, 0, 1, 3, 0, 
	0, 4, 1, 0, 0, 3, 0, 0, 
	4, 1, 0, 0, 2, 2, 0, 0, 
	2, 1, 0, 0, 3, 2, 3, 4, 
	2, 0, 0, 0, 0, 0, 0, 1, 
	3, 0, 0, 4, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 3, 
	2, 4, 3, 0, 0, 4, 1, 0, 
	0, 2, 0, 0, 2, 1, 0, 0, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 4, 0, 1, 
	1, 0, 0, 0, 2, 3, 0, 0, 
	2, 2, 3, 4, 1, 2, 1, 2, 
	1, 1, 2, 4, 4, 4, 4, 4, 
	4, 4, 4, 2, 3, 4, 2, 2, 
	4, 4, 4, 3, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 0, 
	0, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 0
]

class << self
	attr_accessor :_proto_file_index_offsets
	private :_proto_file_index_offsets, :_proto_file_index_offsets=
end
self._proto_file_index_offsets = [
	0, 0, 2, 4, 6, 8, 10, 15, 
	23, 25, 27, 37, 43, 45, 47, 57, 
	59, 61, 71, 77, 79, 81, 88, 95, 
	97, 99, 108, 114, 116, 118, 128, 135, 
	139, 148, 155, 157, 159, 161, 163, 165, 
	167, 172, 180, 182, 184, 194, 200, 202, 
	204, 206, 208, 210, 212, 214, 216, 221, 
	229, 231, 233, 244, 250, 252, 254, 258, 
	268, 270, 272, 274, 276, 278, 283, 291, 
	293, 295, 305, 311, 313, 315, 325, 327, 
	329, 339, 345, 347, 349, 356, 363, 365, 
	367, 376, 382, 384, 386, 396, 403, 407, 
	416, 423, 425, 427, 429, 431, 433, 435, 
	440, 448, 450, 452, 462, 468, 470, 472, 
	474, 476, 478, 480, 482, 484, 486, 491, 
	506, 516, 526, 534, 536, 538, 548, 554, 
	556, 558, 565, 567, 569, 579, 586, 588, 
	590, 596, 598, 600, 602, 604, 606, 608, 
	610, 612, 618, 624, 626, 628, 642, 648, 
	654, 660, 662, 664, 666, 680, 684, 686, 
	688, 697, 704, 708, 717, 719, 729, 731, 
	740, 744, 746, 753, 763, 774, 785, 796, 
	807, 817, 828, 839, 847, 851, 861, 869, 
	873, 885, 896, 907, 912, 923, 934, 945, 
	956, 967, 978, 989, 1000, 1012, 1023, 1034, 
	1045, 1057, 1068, 1079, 1090, 1101, 1112, 1123, 
	1134, 1147, 1158, 1169, 1180, 1191, 1202, 1213, 
	1215, 1217, 1229, 1240, 1251, 1260, 1271, 1282, 
	1293, 1304, 1315, 1326, 1337, 1348, 1360, 1371, 
	1382, 1393, 1405, 1416, 1427, 1438, 1449, 1460, 
	1471, 1482, 1495, 1506, 1517, 1528, 1539, 1550, 
	1561, 1563, 1566, 1568, 1570, 1572, 1574, 1576, 
	1578, 1580, 1582, 1590
]

class << self
	attr_accessor :_proto_file_trans_targs
	private :_proto_file_trans_targs, :_proto_file_trans_targs=
end
self._proto_file_trans_targs = [
	2, 0, 258, 2, 4, 0, 5, 0, 
	6, 0, 7, 7, 8, 7, 0, 7, 
	7, 8, 10, 7, 10, 10, 0, 9, 
	0, 7, 9, 11, 11, 12, 10, 14, 
	11, 10, 10, 10, 0, 11, 11, 12, 
	14, 11, 0, 13, 0, 11, 13, 14, 
	14, 15, 14, 17, 258, 14, 17, 17, 
	0, 16, 0, 14, 16, 18, 18, 19, 
	21, 17, 18, 17, 17, 17, 0, 18, 
	18, 19, 21, 18, 0, 20, 0, 18, 
	20, 22, 22, 23, 25, 22, 33, 0, 
	22, 22, 23, 25, 22, 33, 0, 24, 
	0, 22, 24, 26, 26, 27, 29, 31, 
	31, 26, 30, 0, 26, 26, 27, 29, 
	26, 0, 28, 0, 26, 28, 14, 14, 
	15, 14, 17, 258, 14, 17, 17, 0, 
	26, 26, 27, 29, 26, 30, 0, 32, 
	32, 32, 0, 26, 26, 27, 29, 26, 
	32, 32, 32, 0, 26, 26, 27, 29, 
	26, 33, 0, 35, 0, 36, 0, 37, 
	0, 38, 0, 39, 0, 40, 0, 41, 
	41, 42, 41, 0, 41, 41, 42, 44, 
	41, 44, 44, 0, 43, 0, 41, 43, 
	45, 45, 46, 44, 258, 45, 44, 44, 
	44, 0, 45, 45, 46, 258, 45, 0, 
	47, 0, 45, 47, 49, 0, 50, 0, 
	51, 0, 52, 0, 53, 0, 54, 0, 
	55, 55, 56, 55, 0, 55, 55, 56, 
	58, 55, 58, 58, 0, 57, 0, 55, 
	57, 59, 59, 62, 60, 258, 58, 59, 
	58, 58, 58, 0, 59, 59, 60, 258, 
	59, 0, 61, 0, 59, 61, 58, 58, 
	58, 0, 63, 63, 64, 66, 97, 111, 
	248, 259, 63, 0, 65, 0, 63, 65, 
	67, 0, 68, 0, 69, 0, 70, 70, 
	71, 70, 0, 70, 70, 71, 73, 70, 
	73, 73, 0, 72, 0, 70, 72, 74, 
	74, 75, 73, 77, 74, 73, 73, 73, 
	0, 74, 74, 75, 77, 74, 0, 76, 
	0, 74, 76, 77, 77, 78, 77, 80, 
	63, 77, 80, 80, 0, 79, 0, 77, 
	79, 81, 81, 82, 84, 80, 81, 80, 
	80, 80, 0, 81, 81, 82, 84, 81, 
	0, 83, 0, 81, 83, 85, 85, 86, 
	88, 85, 96, 0, 85, 85, 86, 88, 
	85, 96, 0, 87, 0, 85, 87, 89, 
	89, 90, 92, 94, 94, 89, 93, 0, 
	89, 89, 90, 92, 89, 0, 91, 0, 
	89, 91, 77, 77, 78, 77, 80, 63, 
	77, 80, 80, 0, 89, 89, 90, 92, 
	89, 93, 0, 95, 95, 95, 0, 89, 
	89, 90, 92, 89, 95, 95, 95, 0, 
	89, 89, 90, 92, 89, 96, 0, 98, 
	0, 99, 0, 100, 0, 101, 0, 102, 
	0, 103, 0, 104, 104, 105, 104, 0, 
	104, 104, 105, 107, 104, 107, 107, 0, 
	106, 0, 104, 106, 108, 108, 109, 107, 
	63, 108, 107, 107, 107, 0, 108, 108, 
	109, 63, 108, 0, 110, 0, 108, 110, 
	112, 0, 113, 0, 114, 0, 115, 0, 
	116, 0, 117, 0, 118, 0, 119, 119, 
	215, 119, 0, 119, 119, 120, 215, 121, 
	217, 224, 229, 239, 241, 247, 119, 121, 
	121, 0, 121, 184, 191, 196, 206, 208, 
	214, 121, 121, 0, 122, 122, 183, 123, 
	121, 122, 121, 121, 121, 0, 122, 122, 
	123, 125, 122, 125, 125, 0, 124, 0, 
	122, 124, 126, 126, 127, 129, 125, 126, 
	125, 125, 125, 0, 126, 126, 127, 129, 
	126, 0, 128, 0, 126, 128, 129, 129, 
	130, 132, 129, 182, 0, 131, 0, 129, 
	131, 133, 133, 134, 63, 180, 136, 180, 
	133, 179, 0, 133, 133, 134, 63, 136, 
	133, 0, 135, 0, 133, 135, 136, 136, 
	137, 139, 136, 0, 138, 0, 136, 138, 
	140, 0, 141, 0, 142, 0, 143, 0, 
	144, 0, 145, 0, 146, 146, 147, 149, 
	146, 0, 146, 146, 147, 149, 146, 0, 
	148, 0, 146, 148, 149, 149, 150, 150, 
	158, 160, 171, 172, 177, 149, 164, 171, 
	171, 0, 0, 0, 151, 151, 156, 150, 
	152, 152, 153, 155, 152, 0, 152, 152, 
	153, 155, 152, 0, 154, 0, 152, 154, 
	63, 0, 150, 150, 150, 157, 150, 150, 
	150, 150, 150, 150, 157, 150, 150, 0, 
	150, 150, 150, 0, 159, 0, 149, 159, 
	152, 152, 153, 162, 155, 162, 152, 161, 
	0, 152, 152, 153, 155, 152, 161, 0, 
	163, 163, 163, 0, 152, 152, 153, 155, 
	152, 163, 163, 163, 0, 165, 0, 152, 
	152, 166, 153, 168, 155, 168, 152, 165, 
	0, 167, 0, 152, 152, 153, 168, 155, 
	168, 152, 167, 0, 169, 169, 170, 0, 
	170, 0, 152, 152, 153, 155, 152, 170, 
	0, 152, 152, 153, 155, 171, 152, 171, 
	171, 171, 0, 152, 152, 153, 155, 171, 
	173, 152, 171, 171, 171, 0, 152, 152, 
	153, 155, 171, 174, 152, 171, 171, 171, 
	0, 152, 152, 153, 155, 171, 175, 152, 
	171, 171, 171, 0, 152, 152, 153, 155, 
	171, 176, 152, 171, 171, 171, 0, 152, 
	152, 153, 155, 171, 152, 171, 171, 171, 
	0, 152, 152, 153, 155, 171, 178, 152, 
	171, 171, 171, 0, 152, 152, 153, 155, 
	171, 175, 152, 171, 171, 171, 0, 133, 
	133, 134, 63, 136, 133, 179, 0, 181, 
	181, 181, 0, 133, 133, 134, 63, 136, 
	133, 181, 181, 181, 0, 133, 133, 134, 
	63, 136, 133, 182, 0, 121, 121, 121, 
	0, 122, 122, 183, 123, 121, 185, 188, 
	122, 121, 121, 121, 0, 122, 122, 183, 
	123, 121, 186, 122, 121, 121, 121, 0, 
	122, 122, 183, 123, 121, 187, 122, 121, 
	121, 121, 0, 121, 121, 121, 121, 0, 
	122, 122, 183, 123, 121, 189, 122, 121, 
	121, 121, 0, 122, 122, 183, 123, 121, 
	190, 122, 121, 121, 121, 0, 122, 122, 
	183, 123, 121, 187, 122, 121, 121, 121, 
	0, 122, 122, 183, 123, 121, 192, 122, 
	121, 121, 121, 0, 122, 122, 183, 123, 
	121, 193, 122, 121, 121, 121, 0, 122, 
	122, 183, 123, 121, 194, 122, 121, 121, 
	121, 0, 122, 122, 183, 123, 121, 195, 
	122, 121, 121, 121, 0, 122, 122, 183, 
	123, 121, 187, 122, 121, 121, 121, 0, 
	122, 122, 183, 123, 121, 197, 203, 122, 
	121, 121, 121, 0, 122, 122, 183, 123, 
	121, 198, 122, 121, 121, 121, 0, 122, 
	122, 183, 123, 121, 199, 122, 121, 121, 
	121, 0, 122, 122, 183, 123, 121, 200, 
	122, 121, 121, 121, 0, 122, 122, 183, 
	123, 201, 202, 121, 122, 121, 121, 121, 
	0, 122, 122, 183, 123, 187, 121, 122, 
	121, 121, 121, 0, 122, 122, 183, 123, 
	187, 121, 122, 121, 121, 121, 0, 122, 
	122, 183, 123, 121, 204, 122, 121, 121, 
	121, 0, 122, 122, 183, 123, 121, 205, 
	122, 121, 121, 121, 0, 122, 122, 183, 
	123, 121, 187, 122, 121, 121, 121, 0, 
	122, 122, 183, 123, 121, 207, 122, 121, 
	121, 121, 0, 122, 122, 183, 123, 121, 
	200, 122, 121, 121, 121, 0, 122, 122, 
	183, 123, 121, 209, 206, 210, 122, 121, 
	121, 121, 0, 122, 122, 183, 123, 121, 
	197, 122, 121, 121, 121, 0, 122, 122, 
	183, 123, 121, 211, 122, 121, 121, 121, 
	0, 122, 122, 183, 123, 121, 212, 122, 
	121, 121, 121, 0, 122, 122, 183, 123, 
	121, 213, 122, 121, 121, 121, 0, 122, 
	122, 183, 123, 121, 187, 122, 121, 121, 
	121, 0, 122, 122, 183, 123, 121, 206, 
	122, 121, 121, 121, 0, 216, 0, 119, 
	216, 122, 122, 183, 123, 121, 218, 221, 
	122, 121, 121, 121, 0, 122, 122, 183, 
	123, 121, 219, 122, 121, 121, 121, 0, 
	122, 122, 183, 123, 121, 220, 122, 121, 
	121, 121, 0, 122, 122, 123, 121, 122, 
	121, 121, 121, 0, 122, 122, 183, 123, 
	121, 222, 122, 121, 121, 121, 0, 122, 
	122, 183, 123, 121, 223, 122, 121, 121, 
	121, 0, 122, 122, 183, 123, 121, 220, 
	122, 121, 121, 121, 0, 122, 122, 183, 
	123, 121, 225, 122, 121, 121, 121, 0, 
	122, 122, 183, 123, 121, 226, 122, 121, 
	121, 121, 0, 122, 122, 183, 123, 121, 
	227, 122, 121, 121, 121, 0, 122, 122, 
	183, 123, 121, 228, 122, 121, 121, 121, 
	0, 122, 122, 183, 123, 121, 220, 122, 
	121, 121, 121, 0, 122, 122, 183, 123, 
	121, 230, 236, 122, 121, 121, 121, 0, 
	122, 122, 183, 123, 121, 231, 122, 121, 
	121, 121, 0, 122, 122, 183, 123, 121, 
	232, 122, 121, 121, 121, 0, 122, 122, 
	183, 123, 121, 233, 122, 121, 121, 121, 
	0, 122, 122, 183, 123, 234, 235, 121, 
	122, 121, 121, 121, 0, 122, 122, 183, 
	123, 220, 121, 122, 121, 121, 121, 0, 
	122, 122, 183, 123, 220, 121, 122, 121, 
	121, 121, 0, 122, 122, 183, 123, 121, 
	237, 122, 121, 121, 121, 0, 122, 122, 
	183, 123, 121, 238, 122, 121, 121, 121, 
	0, 122, 122, 183, 123, 121, 220, 122, 
	121, 121, 121, 0, 122, 122, 183, 123, 
	121, 240, 122, 121, 121, 121, 0, 122, 
	122, 183, 123, 121, 233, 122, 121, 121, 
	121, 0, 122, 122, 183, 123, 121, 242, 
	239, 243, 122, 121, 121, 121, 0, 122, 
	122, 183, 123, 121, 230, 122, 121, 121, 
	121, 0, 122, 122, 183, 123, 121, 244, 
	122, 121, 121, 121, 0, 122, 122, 183, 
	123, 121, 245, 122, 121, 121, 121, 0, 
	122, 122, 183, 123, 121, 246, 122, 121, 
	121, 121, 0, 122, 122, 183, 123, 121, 
	220, 122, 121, 121, 121, 0, 122, 122, 
	183, 123, 121, 239, 122, 121, 121, 121, 
	0, 249, 0, 250, 255, 0, 251, 0, 
	252, 0, 253, 0, 254, 0, 118, 0, 
	256, 0, 257, 0, 253, 0, 258, 258, 
	1, 3, 34, 48, 258, 0, 0, 0
]

class << self
	attr_accessor :_proto_file_trans_actions
	private :_proto_file_trans_actions, :_proto_file_trans_actions=
end
self._proto_file_trans_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 5, 0, 5, 5, 9, 0, 
	0, 0, 0, 7, 7, 7, 0, 58, 
	7, 0, 0, 0, 0, 0, 0, 0, 
	25, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 27, 0, 5, 5, 
	9, 0, 0, 0, 0, 55, 55, 55, 
	55, 0, 55, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 21, 21, 21, 61, 21, 61, 0, 
	0, 0, 0, 1, 0, 1, 0, 0, 
	0, 0, 0, 3, 3, 3, 3, 0, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 23, 23, 
	23, 23, 64, 67, 23, 64, 64, 9, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 3, 3, 3, 3, 3, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 5, 
	0, 5, 5, 9, 0, 0, 0, 0, 
	7, 7, 7, 0, 52, 7, 0, 0, 
	0, 0, 0, 0, 0, 19, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	5, 0, 5, 5, 9, 0, 0, 0, 
	0, 7, 7, 7, 7, 46, 0, 7, 
	0, 0, 0, 0, 0, 0, 0, 11, 
	0, 0, 0, 0, 0, 0, 5, 5, 
	5, 9, 0, 0, 0, 0, 0, 1, 
	1, 29, 0, 13, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 5, 0, 
	5, 5, 9, 0, 0, 0, 0, 7, 
	7, 7, 0, 58, 7, 0, 0, 0, 
	0, 0, 0, 0, 25, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 5, 
	27, 0, 5, 5, 9, 0, 0, 0, 
	0, 55, 55, 55, 55, 0, 55, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 21, 21, 21, 
	61, 21, 61, 0, 0, 0, 0, 1, 
	0, 1, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 0, 0, 3, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 23, 23, 23, 23, 64, 67, 
	23, 64, 64, 9, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 3, 
	3, 3, 3, 3, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 0, 5, 5, 9, 
	0, 0, 0, 0, 7, 7, 7, 0, 
	52, 7, 0, 0, 0, 0, 0, 0, 
	0, 19, 0, 0, 0, 0, 0, 0, 
	0, 13, 0, 13, 0, 13, 0, 13, 
	0, 13, 0, 13, 0, 13, 40, 40, 
	40, 40, 0, 0, 0, 1, 0, 31, 
	31, 31, 31, 31, 31, 31, 0, 31, 
	31, 9, 5, 43, 43, 43, 43, 43, 
	43, 5, 5, 9, 70, 70, 7, 70, 
	0, 70, 0, 0, 0, 0, 0, 0, 
	0, 5, 0, 5, 5, 9, 0, 0, 
	0, 0, 49, 49, 49, 49, 0, 49, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 0, 1, 0, 0, 0, 0, 
	0, 3, 3, 3, 37, 0, 3, 0, 
	3, 0, 0, 0, 0, 0, 17, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 15, 15, 15, 15, 
	15, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	0, 1, 5, 31, 31, 0, 1, 5, 
	5, 9, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 3, 3, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	17, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	3, 3, 3, 0, 3, 0, 3, 0, 
	0, 3, 3, 3, 3, 3, 0, 0, 
	0, 0, 0, 0, 3, 3, 3, 3, 
	3, 0, 0, 0, 0, 0, 0, 3, 
	3, 0, 3, 0, 3, 0, 3, 0, 
	0, 0, 0, 3, 3, 3, 0, 3, 
	0, 3, 0, 0, 0, 0, 0, 0, 
	0, 0, 3, 3, 3, 3, 3, 0, 
	0, 7, 7, 7, 7, 0, 7, 0, 
	0, 0, 0, 7, 7, 7, 7, 0, 
	0, 7, 0, 0, 0, 0, 7, 7, 
	7, 7, 0, 0, 7, 0, 0, 0, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	0, 0, 0, 0, 7, 7, 7, 7, 
	0, 0, 7, 0, 0, 0, 0, 34, 
	34, 34, 34, 0, 34, 0, 0, 0, 
	0, 7, 7, 7, 7, 0, 0, 7, 
	0, 0, 0, 0, 7, 7, 7, 7, 
	0, 0, 7, 0, 0, 0, 0, 3, 
	3, 3, 37, 3, 3, 0, 0, 0, 
	0, 0, 0, 3, 3, 3, 37, 3, 
	3, 0, 0, 0, 0, 3, 3, 3, 
	37, 3, 3, 0, 0, 5, 5, 5, 
	9, 70, 70, 7, 70, 0, 0, 0, 
	70, 0, 0, 0, 0, 70, 70, 7, 
	70, 0, 0, 70, 0, 0, 0, 0, 
	70, 70, 7, 70, 0, 0, 70, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	70, 70, 7, 70, 0, 0, 70, 0, 
	0, 0, 0, 70, 70, 7, 70, 0, 
	0, 70, 0, 0, 0, 0, 70, 70, 
	7, 70, 0, 0, 70, 0, 0, 0, 
	0, 70, 70, 7, 70, 0, 0, 70, 
	0, 0, 0, 0, 70, 70, 7, 70, 
	0, 0, 70, 0, 0, 0, 0, 70, 
	70, 7, 70, 0, 0, 70, 0, 0, 
	0, 0, 70, 70, 7, 70, 0, 0, 
	70, 0, 0, 0, 0, 70, 70, 7, 
	70, 0, 0, 70, 0, 0, 0, 0, 
	70, 70, 7, 70, 0, 0, 0, 70, 
	0, 0, 0, 0, 70, 70, 7, 70, 
	0, 0, 70, 0, 0, 0, 0, 70, 
	70, 7, 70, 0, 0, 70, 0, 0, 
	0, 0, 70, 70, 7, 70, 0, 0, 
	70, 0, 0, 0, 0, 70, 70, 7, 
	70, 0, 0, 0, 70, 0, 0, 0, 
	0, 70, 70, 7, 70, 0, 0, 70, 
	0, 0, 0, 0, 70, 70, 7, 70, 
	0, 0, 70, 0, 0, 0, 0, 70, 
	70, 7, 70, 0, 0, 70, 0, 0, 
	0, 0, 70, 70, 7, 70, 0, 0, 
	70, 0, 0, 0, 0, 70, 70, 7, 
	70, 0, 0, 70, 0, 0, 0, 0, 
	70, 70, 7, 70, 0, 0, 70, 0, 
	0, 0, 0, 70, 70, 7, 70, 0, 
	0, 70, 0, 0, 0, 0, 70, 70, 
	7, 70, 0, 0, 0, 0, 70, 0, 
	0, 0, 0, 70, 70, 7, 70, 0, 
	0, 70, 0, 0, 0, 0, 70, 70, 
	7, 70, 0, 0, 70, 0, 0, 0, 
	0, 70, 70, 7, 70, 0, 0, 70, 
	0, 0, 0, 0, 70, 70, 7, 70, 
	0, 0, 70, 0, 0, 0, 0, 70, 
	70, 7, 70, 0, 0, 70, 0, 0, 
	0, 0, 70, 70, 7, 70, 0, 0, 
	70, 0, 0, 0, 0, 0, 0, 0, 
	0, 70, 70, 7, 70, 0, 0, 0, 
	70, 0, 0, 0, 0, 70, 70, 7, 
	70, 0, 0, 70, 0, 0, 0, 0, 
	70, 70, 7, 70, 0, 0, 70, 0, 
	0, 0, 0, 74, 74, 74, 0, 74, 
	0, 0, 0, 0, 70, 70, 7, 70, 
	0, 0, 70, 0, 0, 0, 0, 70, 
	70, 7, 70, 0, 0, 70, 0, 0, 
	0, 0, 70, 70, 7, 70, 0, 0, 
	70, 0, 0, 0, 0, 70, 70, 7, 
	70, 0, 0, 70, 0, 0, 0, 0, 
	70, 70, 7, 70, 0, 0, 70, 0, 
	0, 0, 0, 70, 70, 7, 70, 0, 
	0, 70, 0, 0, 0, 0, 70, 70, 
	7, 70, 0, 0, 70, 0, 0, 0, 
	0, 70, 70, 7, 70, 0, 0, 70, 
	0, 0, 0, 0, 70, 70, 7, 70, 
	0, 0, 0, 70, 0, 0, 0, 0, 
	70, 70, 7, 70, 0, 0, 70, 0, 
	0, 0, 0, 70, 70, 7, 70, 0, 
	0, 70, 0, 0, 0, 0, 70, 70, 
	7, 70, 0, 0, 70, 0, 0, 0, 
	0, 70, 70, 7, 70, 0, 0, 0, 
	70, 0, 0, 0, 0, 70, 70, 7, 
	70, 0, 0, 70, 0, 0, 0, 0, 
	70, 70, 7, 70, 0, 0, 70, 0, 
	0, 0, 0, 70, 70, 7, 70, 0, 
	0, 70, 0, 0, 0, 0, 70, 70, 
	7, 70, 0, 0, 70, 0, 0, 0, 
	0, 70, 70, 7, 70, 0, 0, 70, 
	0, 0, 0, 0, 70, 70, 7, 70, 
	0, 0, 70, 0, 0, 0, 0, 70, 
	70, 7, 70, 0, 0, 70, 0, 0, 
	0, 0, 70, 70, 7, 70, 0, 0, 
	0, 0, 70, 0, 0, 0, 0, 70, 
	70, 7, 70, 0, 0, 70, 0, 0, 
	0, 0, 70, 70, 7, 70, 0, 0, 
	70, 0, 0, 0, 0, 70, 70, 7, 
	70, 0, 0, 70, 0, 0, 0, 0, 
	70, 70, 7, 70, 0, 0, 70, 0, 
	0, 0, 0, 70, 70, 7, 70, 0, 
	0, 70, 0, 0, 0, 0, 70, 70, 
	7, 70, 0, 0, 70, 0, 0, 0, 
	0, 0, 13, 0, 0, 13, 0, 13, 
	0, 13, 0, 13, 0, 13, 0, 13, 
	0, 13, 0, 13, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_proto_file_eof_actions
	private :_proto_file_eof_actions, :_proto_file_eof_actions=
end
self._proto_file_eof_actions = [
	0, 0, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 0, 0, 0, 9, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 0, 0, 0, 9, 13, 
	0, 0, 0, 0, 0, 0, 9, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 9, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	9, 0, 0, 0, 0, 0, 0, 13, 
	13, 13, 13, 13, 13, 13, 0, 9, 
	9, 0, 9, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 9, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	13, 13, 13, 13, 13, 13, 13, 13, 
	13, 13, 0, 0
]

class << self
	attr_accessor :proto_file_start
end
self.proto_file_start = 258;
class << self
	attr_accessor :proto_file_first_final
end
self.proto_file_first_final = 258;
class << self
	attr_accessor :proto_file_error
end
self.proto_file_error = 0;

class << self
	attr_accessor :proto_file_en_messageBody
end
self.proto_file_en_messageBody = 63;
class << self
	attr_accessor :proto_file_en_main
end
self.proto_file_en_main = 258;


# line 119 "protobuf.rl"

    
# line 926 "protobuf.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = proto_file_start
end

# line 121 "protobuf.rl"
    @depth = 0
    @has_package = false
    istart = 0
    mark = 0
    eof = -1

    expected = proc do |desc|
      lines = data.split("\n")
      lp = p
      line = 0
      (lp -= lines[line].length + 1; line += 1) while lines[line].length < lp
      if desc
        str = "\n#{line}:error: expected #{desc}\n#{lines[line]}\n"
      else
        str = "\n#{line}:error: parse error\n#{lines[line]}\n"
      end
      str += " " * lp
      str += "^\n"
      raise ParserError, str
    end

    io.puts "# Generated file. Do not edit."
    if input_name
      io.puts "# <#{input_name}>"
    end
    io.puts
    io.puts "require 'protobuf/message/message'"
    io.puts "require 'protobuf/message/enum'"
    io.puts

    
# line 965 "protobuf.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	if cs == 0
		_goto_level = _out
		next
	end
	end
	if _goto_level <= _resume
	_keys = _proto_file_key_offsets[cs]
	_trans = _proto_file_index_offsets[cs]
	_klen = _proto_file_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p] < _proto_file_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p] > _proto_file_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _proto_file_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p] < _proto_file_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p] > _proto_file_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	cs = _proto_file_trans_targs[_trans]
	if _proto_file_trans_actions[_trans] != 0
		_acts = _proto_file_trans_actions[_trans]
		_nacts = _proto_file_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _proto_file_actions[_acts - 1]
when 0 then
# line 5 "protobuf.rl"
		begin

    mark = p
  		end
# line 5 "protobuf.rl"
when 1 then
# line 9 "protobuf.rl"
		begin

    output(data[mark ... p])
  		end
# line 9 "protobuf.rl"
when 2 then
# line 13 "protobuf.rl"
		begin

    outputS(data[mark ... p])
  		end
# line 13 "protobuf.rl"
when 3 then
# line 17 "protobuf.rl"
		begin

    output(dot_to_module(data[mark ... p]))
  		end
# line 17 "protobuf.rl"
when 4 then
# line 48 "protobuf.rl"
		begin
 istart = p 		end
# line 48 "protobuf.rl"
when 5 then
# line 48 "protobuf.rl"
		begin
 lastIdent = data[istart ... p] 		end
# line 48 "protobuf.rl"
when 6 then
# line 49 "protobuf.rl"
		begin
 expected["identifier"] 		end
# line 49 "protobuf.rl"
when 7 then
# line 53 "protobuf.rl"
		begin
 outputS("module #{capfirst(lastIdent)}\n"); @has_package = true 		end
# line 53 "protobuf.rl"
when 8 then
# line 56 "protobuf.rl"
		begin
 output " " 		end
# line 56 "protobuf.rl"
when 9 then
# line 57 "protobuf.rl"
		begin
 expected["required|optional|repeated"] 		end
# line 57 "protobuf.rl"
when 10 then
# line 59 "protobuf.rl"
		begin
 output ":" 		end
# line 59 "protobuf.rl"
when 11 then
# line 63 "protobuf.rl"
		begin
 output ", " 		end
# line 63 "protobuf.rl"
when 12 then
# line 65 "protobuf.rl"
		begin
 output ", :default => " 		end
# line 65 "protobuf.rl"
when 13 then
# line 66 "protobuf.rl"
		begin
 output ":#{lastIdent}, " 		end
# line 66 "protobuf.rl"
when 14 then
# line 66 "protobuf.rl"
		begin
 output "\n" 		end
# line 66 "protobuf.rl"
when 15 then
# line 68 "protobuf.rl"
		begin
 outputS("class #{capfirst(lastIdent)} < ::Protobuf::Message\n"); @depth += 1; outputS("defined_in __FILE__\n"); 	begin
		cs = 63
		_trigger_goto = true
		_goto_level = _again
		break
	end
 		end
# line 68 "protobuf.rl"
when 16 then
# line 70 "protobuf.rl"
		begin
 outputS(capfirst(lastIdent)) 		end
# line 70 "protobuf.rl"
when 17 then
# line 70 "protobuf.rl"
		begin
 output " = " 		end
# line 70 "protobuf.rl"
when 18 then
# line 70 "protobuf.rl"
		begin
 output "\n" 		end
# line 70 "protobuf.rl"
when 19 then
# line 73 "protobuf.rl"
		begin
 outputS("class #{capfirst(lastIdent)} < ::Protobuf::Enum\n"); @depth += 1; outputS("defined_in __FILE__\n"); 		end
# line 73 "protobuf.rl"
when 20 then
# line 75 "protobuf.rl"
		begin
 @depth -= 1; outputS("end\n"); 		end
# line 75 "protobuf.rl"
when 21 then
# line 78 "protobuf.rl"
		begin
 @depth -= 1;
                 outputS("end\n");
                 if @depth > 0 then 	begin
		cs = 63
		_trigger_goto = true
		_goto_level = _again
		break
	end

                 else 	begin
		cs = 258
		_trigger_goto = true
		_goto_level = _again
		break
	end

                 end; 		end
# line 78 "protobuf.rl"
# line 1185 "protobuf.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	if cs == 0
		_goto_level = _out
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	__acts = _proto_file_eof_actions[cs]
	__nacts =  _proto_file_actions[__acts]
	__acts += 1
	while __nacts > 0
		__nacts -= 1
		__acts += 1
		case _proto_file_actions[__acts - 1]
when 6 then
# line 49 "protobuf.rl"
		begin
 expected["identifier"] 		end
# line 49 "protobuf.rl"
when 9 then
# line 57 "protobuf.rl"
		begin
 expected["required|optional|repeated"] 		end
# line 57 "protobuf.rl"
# line 1223 "protobuf.rb"
		end # eof action switch
	end
	if _trigger_goto
		next
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 152 "protobuf.rl"

    if cs < 
# line 1240 "protobuf.rb"
258
# line 154 "protobuf.rl"
      expected[nil]
    end

    output "end\n" if @has_package
  end

end
